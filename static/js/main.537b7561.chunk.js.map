{"version":3,"sources":["components/Note.js","components/Notes.js","components/Textbox.js","components/Dashboard.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Note","props","useState","title","noteTitle","setNoteTitle","description","noteDescription","setNoteDescription","isHidden","setIsHidden","isSaving","setIsSaving","modalTitle","setModalTitle","modalDescription","setModalDescription","updateNote","_id","fetch","method","headers","Accept","body","JSON","stringify","then","catch","err","className","onClick","src","alt","e","stopPropagation","mode","window","location","reload","deleteNote","console","log","rows","placeholder","defaultValue","onChange","target","value","Notes","notes","setNotes","fetchingNotes","setFetchingNotes","url","user","googleId","useEffect","response","status","json","Error","responseJson","reverse","map","note","i","key","Textbox","setTitle","setDescription","type","submitNote","Dashboard","isLoading","isSignedIn","href","picture","App","setIsSignedIn","setUser","setIsLoading","credentials","success","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.537b7561.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport './Note.css'\r\n\r\nexport default function Note(props){\r\n    const [noteTitle, setNoteTitle] = useState(props.title)\r\n    const [noteDescription, setNoteDescription] = useState(props.description)\r\n    const [isHidden, setIsHidden] = useState(true)\r\n    const [isSaving, setIsSaving] = useState(false)\r\n    const [modalTitle, setModalTitle] = useState(props.title)\r\n    const [modalDescription, setModalDescription] = useState(props.description)\r\n\r\n    function insideModalOnClick(e) {\r\n        e.stopPropagation()\r\n        console.log('clicking inside the modal')\r\n    }\r\n\r\n    function deleteNote(_id,e){\r\n        e.stopPropagation()\r\n        fetch(`http://localhost:5000/notes/${_id}`,\r\n            {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    Accept: \"application/json\",\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Access-Control-Allow-Origin\":true\r\n                },\r\n                mode: \"cors\"\r\n            })\r\n            .then(()=>{\r\n                window.location.reload()\r\n            })\r\n            .catch(err => {\r\n                throw(err)\r\n            });\r\n    }\r\n    \r\n    function updateNote(_id,title,description) {\r\n        setIsSaving(true)\r\n        fetch(`http://localhost:5000/notes/update/${_id}`,\r\n            {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    Accept: \"application/json\",\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Access-Control-Allow-Origin\":true\r\n                },\r\n                body: JSON.stringify({\r\n                    title: title,\r\n                    description: description\r\n                })\r\n            })\r\n            .then(()=>{\r\n                setNoteTitle(title)\r\n                setNoteDescription(description)\r\n                setIsSaving(false)\r\n            })\r\n            .catch(err => {\r\n                setIsSaving(false)\r\n                throw(err)\r\n            });\r\n    }\r\n\r\n    return(\r\n        <div className='Note-Modal'>\r\n            <div className='Note' onClick={()=>setIsHidden(false)}> \r\n                <div className='Note-Title'>{noteTitle}</div>\r\n                <div className='Note-Description'>{noteDescription}</div>\r\n                <div className='Note-DeleteSection'>\r\n                    <img src='edit.png' alt='edit' description='Edit'/>\r\n                    <img src='delete.png' alt='delete' description='Delete' onClick={(e)=>deleteNote(props._id,e)}/>\r\n                </div>\r\n            </div>\r\n            {!isHidden && (\r\n                <div className='Modal' onClick={()=>setIsHidden(true)}>\r\n                    <div className='Modal-Content' onClick={insideModalOnClick}>\r\n                        <div className='Save-Section'>\r\n                            {isSaving ? (\r\n                                <div className='Modal-Save-Text'>Saving...</div>\r\n                            ) : (\r\n                                <div className='Modal-Save-Text'>All changes saved</div>\r\n                            ) }\r\n                        </div>\r\n                        <textarea rows='1' className='Modal-Title' placeholder='Title' defaultValue={noteTitle} onChange={e => {\r\n                            setModalTitle(e.target.value)\r\n                            updateNote(props._id,modalTitle,modalDescription)\r\n                        }}/>\r\n                        <textarea rows='8' className='Modal-Description' placeholder='Take a note...' defaultValue={noteDescription} onChange={e => {\r\n                            setModalDescription(e.target.value)\r\n                            updateNote(props._id,modalTitle,modalDescription)\r\n                        }}/>\r\n                        <div className='Modal-Close' onClick={()=>setIsHidden(true)}>\r\n                            <div className='Modal-Close-Text'>Close</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport './Notes.css'\r\nimport Note from './Note'\r\n\r\nexport default function Notes(props){\r\n    const [notes,setNotes] = useState([]);\r\n    const [fetchingNotes, setFetchingNotes] = useState(true)\r\n    var url = 'http://localhost:5000/notes/'+props.user.googleId;\r\n    useEffect(()=>{\r\n        setFetchingNotes(true)\r\n        fetch(url,\r\n        {\r\n            method: \"GET\",\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n              \"Access-Control-Allow-Origin\":true\r\n            }\r\n            // mode: 'cors'\r\n        })\r\n        .then(response => {\r\n            console.log(\"notes request received\")\r\n            if (response.status === 200){\r\n                return response.json()\r\n            }\r\n            throw new Error(\"failed to load notes\");\r\n          })\r\n          .then(responseJson => {\r\n            setNotes(responseJson.reverse())\r\n            setFetchingNotes(false)\r\n          })\r\n          .catch(err => {\r\n            setFetchingNotes(false)\r\n            throw(err)\r\n          });\r\n        },\r\n        [url]\r\n    )\r\n    return fetchingNotes ? (\r\n        <div className='Notes-Container'>\r\n            <img src='loading.svg' alt='Loading'/>\r\n        </div>\r\n    ) :\r\n    (\r\n        <div className='Notes-Container'>\r\n            {console.log('here')}\r\n            {notes.map((note,i)=>\r\n                <Note key={i} {...note} />\r\n            )}\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport './Textbox.css'\r\n\r\nexport default function Textbox(props){\r\n    const [title,setTitle] = useState('')\r\n    const [description,setDescription] = useState('')\r\n\r\n    return(\r\n        <div className='Container'>\r\n            <input className='Title' type='text' placeholder='Title' onChange={e => setTitle(e.target.value)}/>\r\n            <textarea className='Description' type='text' placeholder='Take a note...' onChange={e => setDescription(e.target.value)}/>\r\n            {/* <button className='Submit' onClick={()=>submitNote(props.user.googleId,title,description)}>Add Note</button> */}\r\n            <div className='Submit' onClick={()=>submitNote(props.user.googleId,title,description)}>Add Note</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction submitNote(googleId,title,description){\r\n        fetch(\"http://localhost:5000/notes/add\",\r\n        {\r\n            method: \"POST\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"Access-Control-Allow-Origin\":true\r\n            },\r\n            mode: \"cors\",\r\n            body: JSON.stringify({\r\n                googleId: googleId,\r\n                title: title,\r\n                description: description\r\n            })\r\n        })\r\n        .then(()=>{\r\n            window.location.reload()\r\n        })\r\n        .catch(err => {\r\n            throw(err)\r\n        });\r\n}","import React from \"react\";\r\nimport './Dashboard.css';\r\nimport Notes from  './Notes'\r\nimport Textbox from \"./Textbox\";\r\n\r\nexport default function Dashboard(props){\r\n    if (props.isLoading) return (\r\n        <div className='LoadingDashboard'>\r\n            <img src='loading.svg' alt='Loading'/>\r\n        </div>\r\n    )\r\n    else if (props.isSignedIn===false) return (\r\n        <div className='NotSignedInDashboard'>\r\n            <a href='http://localhost:5000/auth/google'>Login</a>            \r\n        </div>\r\n    )\r\n    else if(props.isSignedIn) return(   \r\n        <div className=\"Dashboard\">\r\n            <Textbox {...props} />\r\n            <Notes {...props} />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './Header.css';\r\n\r\nexport default function(props){\r\n    return props.isSignedIn ? (\r\n        <div className=\"Header\">\r\n            <div className='Dropdown'>\r\n                <img className='UserImage' src={props.user.picture} alt='User'/>\r\n                <div className='DropdownContent'>\r\n                    <a href=\"http://localhost:5000/auth/logout\">Logout</a>\r\n                </div>\r\n            </div>\r\n            <div className='Heading'>Notes</div>\r\n        </div>\r\n    ) :\r\n    (\r\n        <div className=\"Header\">\r\n            <div className='Dropdown'>\r\n            <img className='UserImage' src='account.png' alt='User'/>\r\n                <div className='DropdownContent'>\r\n                    <a href=\"http://localhost:5000/auth/google\">Login</a>\r\n                </div>\r\n            </div>\r\n            <div className='Heading'>Notes</div>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from \"react\";\nimport Dashboard from \"./components/Dashboard\"\nimport Header from \"./components/Header\";\nimport './App.css'\n\nfunction App() {\n  const [isSignedIn,setIsSignedIn] = useState(false)\n  const [user,setUser] = useState({})\n  const [isLoading,setIsLoading] = useState(false)\n\n  useEffect(()=>{\n    setIsLoading(true)\n    fetch(\"http://localhost:5000/auth/login/success\",\n      {\n        method: \"GET\",\n        credentials: \"include\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Credentials\": true,\n          \"Access-Control-Allow-Origin\":true\n        }\n      })\n      .then(response => {\n        console.log(\"request received\")\n        if (response.success === false) {\n          return false\n        }\n        else if (response.status === 200) return response.json();\n        throw new Error(\"failed to authenticate user\");\n      })\n      .then(responseJson => {\n        console.log(responseJson)\n        if(responseJson.success===false){\n          setIsSignedIn(false)\n          setIsLoading(false)\n        }\n        else{\n          setUser(responseJson.user)\n          setIsSignedIn(true)\n          setIsLoading(false)\n        }\n        \n      })\n      .catch(err => {\n        setIsSignedIn(false)\n        setIsLoading(false)\n        throw(err)\n      });\n  }, \n  []\n  )\n\n  const props = {\n    user: user,\n    isSignedIn: isSignedIn,\n    isLoading: isLoading\n  }\n\n  return (\n    <div className=\"App\">\n      <Header {...props} />\n      <Dashboard {...props} />\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}