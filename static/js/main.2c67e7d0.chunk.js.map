{"version":3,"sources":["components/Header.jsx","components/Homepage.jsx","AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["Header","_handleSignInClick","window","open","_handleLogoutClick","props","handleNotAuthenticated","authenticated","this","className","to","onClick","Component","HomePage","state","user","error","_handleNotAuthenticated","setState","fetch","method","credentials","headers","Accept","then","response","status","json","Error","responseJson","catch","name","AppRouter","exact","path","component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"yQAIqBA,E,4MAqBnBC,mBAAqB,WAGnBC,OAAOC,KAAK,oCAAqC,U,EAGnDC,mBAAqB,WAGnBF,OAAOC,KAAK,oCAAqC,SACjD,EAAKE,MAAMC,0B,uDA1BH,IACAC,EAAkBC,KAAKH,MAAvBE,cACR,OACE,wBAAIE,UAAU,QACZ,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEDH,EACC,wBAAII,QAASH,KAAKJ,oBAAlB,UAEA,wBAAIO,QAASH,KAAKP,oBAAlB,c,GAf0BW,aCAfC,E,4MACnBC,MAAQ,CACNC,KAAM,GACNC,MAAO,KACPT,eAAe,G,EAqDjBU,wBAA0B,WACxB,EAAKC,SAAS,CAAEX,eAAe,K,kEAnDZ,IAAD,OAClBY,MAAM,2CAA4C,CAChDC,OAAQ,MACRC,YAAa,UACbC,QAAS,CACPC,OAAQ,mBACR,eAAgB,mBAChB,oCAAoC,KAGrCC,MAAK,SAAAC,GACJ,GAAwB,MAApBA,EAASC,OAAgB,OAAOD,EAASE,OAC7C,MAAM,IAAIC,MAAM,kCAEjBJ,MAAK,SAAAK,GACJ,EAAKX,SAAS,CACZX,eAAe,EACfQ,KAAMc,EAAad,UAGtBe,OAAM,SAAAd,GACL,EAAKE,SAAS,CACZX,eAAe,EACfS,MAAO,qC,+BAKL,IACAT,EAAkBC,KAAKM,MAAvBP,cACR,OACE,6BACE,kBAAC,EAAD,CACEA,cAAeA,EACfD,uBAAwBE,KAAKS,0BAE/B,6BACIV,EAGA,6BACE,6DACA,uCAAaC,KAAKM,MAAMC,KAAKgB,KAA7B,MAJF,8C,GA7C0BnB,a,OCAzBoB,EAAY,WACvB,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtB,OCC1BuB,E,uKAJX,OAAO,kBAAC,EAAD,U,GAFOxB,aCSEyB,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAd,GACLmC,QAAQnC,MAAMA,EAAMoC,c","file":"static/js/main.2c67e7d0.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class Header extends Component {\r\n  static propTypes = {\r\n    authenticated: PropTypes.bool.isRequired\r\n  };\r\n\r\n  render() {\r\n    const { authenticated } = this.props;\r\n    return (\r\n      <ul className=\"menu\">\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        {authenticated ? (\r\n          <li onClick={this._handleLogoutClick}>Logout</li>\r\n        ) : (\r\n          <li onClick={this._handleSignInClick}>Login</li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  _handleSignInClick = () => {\r\n    // Authenticate using via passport api in the backend\r\n    // Open Twitter login page\r\n    window.open(\"http://localhost:6969/auth/google\", \"_self\");\r\n  };\r\n\r\n  _handleLogoutClick = () => {\r\n    // Logout using Twitter passport api\r\n    // Set authenticated state to false in the HomePage component\r\n    window.open(\"http://localhost:6969/auth/logout\", \"_self\");\r\n    this.props.handleNotAuthenticated();\r\n  };\r\n} ","import Header from \"./Header\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class HomePage extends Component {\r\n  state = {\r\n    user: {},\r\n    error: null,\r\n    authenticated: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"http://localhost:6969/auth/login/success\", {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Credentials\": true\r\n      }\r\n    })\r\n      .then(response => {\r\n        if (response.status === 200) return response.json();\r\n        throw new Error(\"failed to authenticate user\");\r\n      })\r\n      .then(responseJson => {\r\n        this.setState({\r\n          authenticated: true,\r\n          user: responseJson.user\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          authenticated: false,\r\n          error: \"Failed to authenticate user\"\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { authenticated } = this.state;\r\n    return (\r\n      <div>\r\n        <Header\r\n          authenticated={authenticated}\r\n          handleNotAuthenticated={this._handleNotAuthenticated}\r\n        />\r\n        <div>\r\n          {!authenticated ? (\r\n            <h1>Welcome!</h1>\r\n          ) : (\r\n            <div>\r\n              <h1>You have login succcessfully!</h1>\r\n              <h2>Welcome {this.state.user.name}!</h2>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _handleNotAuthenticated = () => {\r\n    this.setState({ authenticated: false });\r\n  };\r\n}","import React from \"react\";\r\nimport HomePage from \"./components/Homepage\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nexport const AppRouter = () => {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Route exact path=\"/\" component={HomePage} />\r\n      </div>\r\n    </Router>\r\n  );\r\n};","import React, { Component } from \"react\";\r\nimport { AppRouter } from \"./AppRouter\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <AppRouter />;\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}